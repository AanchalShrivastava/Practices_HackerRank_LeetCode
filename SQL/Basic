Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

-SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(CITY, '[aiueo]$');

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

-SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(LOWER(CITY), '^[aeiou]') and  REGEXP_LIKE(LOWER(CITY), '[aeiou]$');

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

-select distinct city from station where regexp_like(lower(city), '^[^aeiou]');

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates

-select distinct city from station where regexp_like(lower(city), '[^aeiou]$');

Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

-SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(LOWER(CITY), '^[^aeiou]') OR REGEXP_LIKE(LOWER(CITY), '[^aeiou]$');

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

-SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(LOWER(CITY), '^[^aeiou]') AND REGEXP_LIKE(LOWER(CITY), '[^aeiou]$');

Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

-SELECT Name
FROM Students
WHERE Marks > 75
ORDER BY SUBSTR(Name, - 3) ASC;

Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

-select name from employee order by name;

Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id

-select name from employee where salary > 2000 and months <10 
order by employee_id;

Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

-  SELECT
    CASE
        WHEN A >= (B + C) OR B >= (A + C) OR C >= (A + B) THEN 'Not A Triangle'
        WHEN A = B AND A = C THEN 'Equilateral'
        WHEN A = B OR B = C OR A = C THEN 'Isosceles'
        ELSE 'Scalene'
    END
FROM TRIANGLES;

Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
-SELECT Name || '(' || SUBSTR(Occupation, 1, 1) || ')'
FROM OCCUPATIONS
ORDER BY Name;
-select ('There are a total of '||count(name)||' '||lower(occupation)||'s.') from occupations group by occupation order by count(name), occupation;

Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.

Input Format

-select doctor, professor, singer, actor
from
(select name, occupation, row_number() over (partition by occupation order by name asc) rn from occupations)
pivot (
min(name) for occupation in ('Doctor' as doctor,'Professor' as professor,'Singer' as singer,'Actor' as actor)
)
order by rn;

Aggregation Questions

Query a count of the number of cities in CITY having a Population larger than .

-select count(*) from city where population > 100000;

Query the average population of all cities in CITY where District is California.

-select avg(population) from city where district = 'California';

Query the average population for all cities in CITY, rounded down to the nearest integer.

-select round(avg(population)) from city;

Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

-select sum(population) from city where countrycode='JPN';

Query the difference between the maximum and minimum populations in CITY.

-select max(Population) - min(Population) from city;

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboards  key was broken until after completing the calculation. She wants your help finding the difference
between her miscalculation (using salaries with any zeros removed), and the actual average salary.

-SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) FROM EMPLOYEES;

We define an employees total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.

-select max(salary * months), count(*) from employee 
where salary * months =  (select max(salary * months) from employee);

Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.

-select round(sum(lat_n),2) , round(sum(long_w),2) from station;

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.

-SELECT TRUNC(SUM(Lat_N), 4)
FROM STATION
WHERE Lat_N > 38.7880 AND Lat_N < 137.2345;

Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

-SELECT Trunc(MAX(lat_n),4)
FROM STATION
WHERE Lat_N < 137.2345;

Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.

-Select ROUND(LONG_W,4) from STATION WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N<137.2345);

Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.

-SELECT ROUND(MIN(Lat_N), 4)
FROM Station
WHERE Lat_N > 38.7780;

Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places

- select ROUND(long_w,4) from station where lat_n= (select min(lat_n) from station where lat_n > 38.7780);

Consider  and  to be two points on a 2D plane.

 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.

-SELECT ROUND(MAX(Lat_N) - MIN(Lat_N) + MAX(Long_W) - MIN(Long_W), 4)
FROM Station;

Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.

-SELECT
    ROUND(
        SQRT(
            POWER((MAX(Lat_N) - MIN(Lat_N)), 2) +
            POWER((MAX(Long_W) - MIN(Long_W)), 2)
            )
        , 4)
FROM Station;

A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.

-SELECT ROUND(MEDIAN(Lat_N), 4)
FROM Station;

